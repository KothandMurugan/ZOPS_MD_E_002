*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 14.03.2019 at 07:16:13
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZVOPS_T001KML...................................*
FORM GET_DATA_ZVOPS_T001KML.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM T001K WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_T001KML .
ZVOPS_T001KML-MANDT =
T001K-MANDT .
ZVOPS_T001KML-BWKEY =
T001K-BWKEY .
ZVOPS_T001KML-BUKRS =
T001K-BUKRS .
ZVOPS_T001KML-MLBWA =
T001K-MLBWA .
ZVOPS_T001KML-MLBWV =
T001K-MLBWV .
ZVOPS_T001KML-ERKLAERKOM =
T001K-ERKLAERKOM .
ZVOPS_T001KML-MLAST =
T001K-MLAST .
ZVOPS_T001KML-MLASV =
T001K-MLASV .
ZVOPS_T001KML-MLCCS =
T001K-MLCCS .
<VIM_TOTAL_STRUC> = ZVOPS_T001KML.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_T001KML .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_T001KML.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_T001KML-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM T001K WHERE
  BWKEY = ZVOPS_T001KML-BWKEY .
    IF SY-SUBRC = 0.
    DELETE T001K .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM T001K WHERE
  BWKEY = ZVOPS_T001KML-BWKEY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR T001K.
    ENDIF.
T001K-MANDT =
ZVOPS_T001KML-MANDT .
T001K-BWKEY =
ZVOPS_T001KML-BWKEY .
T001K-BUKRS =
ZVOPS_T001KML-BUKRS .
T001K-MLBWA =
ZVOPS_T001KML-MLBWA .
T001K-MLBWV =
ZVOPS_T001KML-MLBWV .
T001K-ERKLAERKOM =
ZVOPS_T001KML-ERKLAERKOM .
T001K-MLAST =
ZVOPS_T001KML-MLAST .
T001K-MLASV =
ZVOPS_T001KML-MLASV .
T001K-MLCCS =
ZVOPS_T001KML-MLCCS .
    IF SY-SUBRC = 0.
    UPDATE T001K ##WARN_OK.
    ELSE.
    INSERT T001K .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_T001KML-UPD_FLAG,
STATUS_ZVOPS_T001KML-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_T001KML.
  SELECT SINGLE * FROM T001K WHERE
BWKEY = ZVOPS_T001KML-BWKEY .
ZVOPS_T001KML-MANDT =
T001K-MANDT .
ZVOPS_T001KML-BWKEY =
T001K-BWKEY .
ZVOPS_T001KML-BUKRS =
T001K-BUKRS .
ZVOPS_T001KML-MLBWA =
T001K-MLBWA .
ZVOPS_T001KML-MLBWV =
T001K-MLBWV .
ZVOPS_T001KML-ERKLAERKOM =
T001K-ERKLAERKOM .
ZVOPS_T001KML-MLAST =
T001K-MLAST .
ZVOPS_T001KML-MLASV =
T001K-MLASV .
ZVOPS_T001KML-MLCCS =
T001K-MLCCS .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_T001KML USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_T001KML-BWKEY TO
T001K-BWKEY .
MOVE ZVOPS_T001KML-MANDT TO
T001K-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'T001K'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN T001K TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'T001K'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVOPS_TCKM2.....................................*
FORM GET_DATA_ZVOPS_TCKM2.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TCKM2 WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TCKM2 .
ZVOPS_TCKM2-MANDT =
TCKM2-MANDT .
ZVOPS_TCKM2-BWKEY =
TCKM2-BWKEY .
ZVOPS_TCKM2-LFDNR =
TCKM2-LFDNR .
ZVOPS_TCKM2-MATLED =
TCKM2-MATLED .
<VIM_TOTAL_STRUC> = ZVOPS_TCKM2.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TCKM2 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TCKM2.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TCKM2-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TCKM2 WHERE
  BWKEY = ZVOPS_TCKM2-BWKEY AND
  LFDNR = ZVOPS_TCKM2-LFDNR .
    IF SY-SUBRC = 0.
    DELETE TCKM2 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TCKM2 WHERE
  BWKEY = ZVOPS_TCKM2-BWKEY AND
  LFDNR = ZVOPS_TCKM2-LFDNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TCKM2.
    ENDIF.
TCKM2-MANDT =
ZVOPS_TCKM2-MANDT .
TCKM2-BWKEY =
ZVOPS_TCKM2-BWKEY .
TCKM2-LFDNR =
ZVOPS_TCKM2-LFDNR .
TCKM2-MATLED =
ZVOPS_TCKM2-MATLED .
    IF SY-SUBRC = 0.
    UPDATE TCKM2 ##WARN_OK.
    ELSE.
    INSERT TCKM2 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TCKM2-UPD_FLAG,
STATUS_ZVOPS_TCKM2-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TCKM2.
  SELECT SINGLE * FROM TCKM2 WHERE
BWKEY = ZVOPS_TCKM2-BWKEY AND
LFDNR = ZVOPS_TCKM2-LFDNR .
ZVOPS_TCKM2-MANDT =
TCKM2-MANDT .
ZVOPS_TCKM2-BWKEY =
TCKM2-BWKEY .
ZVOPS_TCKM2-LFDNR =
TCKM2-LFDNR .
ZVOPS_TCKM2-MATLED =
TCKM2-MATLED .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TCKM2 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TCKM2-BWKEY TO
TCKM2-BWKEY .
MOVE ZVOPS_TCKM2-LFDNR TO
TCKM2-LFDNR .
MOVE ZVOPS_TCKM2-MANDT TO
TCKM2-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TCKM2'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TCKM2 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TCKM2'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVOPS_TKA3A.....................................*
FORM GET_DATA_ZVOPS_TKA3A.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TKA3A WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TKA3A .
ZVOPS_TKA3A-MANDT =
TKA3A-MANDT .
ZVOPS_TKA3A-BUKRS =
TKA3A-BUKRS .
ZVOPS_TKA3A-KSTAR =
TKA3A-KSTAR .
ZVOPS_TKA3A-XGSBER =
TKA3A-XGSBER .
ZVOPS_TKA3A-KOKRS =
TKA3A-KOKRS .
ZVOPS_TKA3A-KOSTL =
TKA3A-KOSTL .
ZVOPS_TKA3A-AUFNR =
TKA3A-AUFNR .
ZVOPS_TKA3A-BSSUBST =
TKA3A-BSSUBST .
ZVOPS_TKA3A-PRCTR =
TKA3A-PRCTR .
ZVOPS_TKA3A-REGEL =
TKA3A-REGEL .
<VIM_TOTAL_STRUC> = ZVOPS_TKA3A.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TKA3A .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TKA3A.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TKA3A-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TKA3A WHERE
  BUKRS = ZVOPS_TKA3A-BUKRS AND
  KSTAR = ZVOPS_TKA3A-KSTAR .
    IF SY-SUBRC = 0.
    DELETE TKA3A .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TKA3A WHERE
  BUKRS = ZVOPS_TKA3A-BUKRS AND
  KSTAR = ZVOPS_TKA3A-KSTAR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TKA3A.
    ENDIF.
TKA3A-MANDT =
ZVOPS_TKA3A-MANDT .
TKA3A-BUKRS =
ZVOPS_TKA3A-BUKRS .
TKA3A-KSTAR =
ZVOPS_TKA3A-KSTAR .
TKA3A-XGSBER =
ZVOPS_TKA3A-XGSBER .
TKA3A-KOKRS =
ZVOPS_TKA3A-KOKRS .
TKA3A-KOSTL =
ZVOPS_TKA3A-KOSTL .
TKA3A-AUFNR =
ZVOPS_TKA3A-AUFNR .
TKA3A-BSSUBST =
ZVOPS_TKA3A-BSSUBST .
TKA3A-PRCTR =
ZVOPS_TKA3A-PRCTR .
TKA3A-REGEL =
ZVOPS_TKA3A-REGEL .
    IF SY-SUBRC = 0.
    UPDATE TKA3A ##WARN_OK.
    ELSE.
    INSERT TKA3A .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TKA3A-UPD_FLAG,
STATUS_ZVOPS_TKA3A-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TKA3A.
  SELECT SINGLE * FROM TKA3A WHERE
BUKRS = ZVOPS_TKA3A-BUKRS AND
KSTAR = ZVOPS_TKA3A-KSTAR .
ZVOPS_TKA3A-MANDT =
TKA3A-MANDT .
ZVOPS_TKA3A-BUKRS =
TKA3A-BUKRS .
ZVOPS_TKA3A-KSTAR =
TKA3A-KSTAR .
ZVOPS_TKA3A-XGSBER =
TKA3A-XGSBER .
ZVOPS_TKA3A-KOKRS =
TKA3A-KOKRS .
ZVOPS_TKA3A-KOSTL =
TKA3A-KOSTL .
ZVOPS_TKA3A-AUFNR =
TKA3A-AUFNR .
ZVOPS_TKA3A-BSSUBST =
TKA3A-BSSUBST .
ZVOPS_TKA3A-PRCTR =
TKA3A-PRCTR .
ZVOPS_TKA3A-REGEL =
TKA3A-REGEL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TKA3A USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TKA3A-BUKRS TO
TKA3A-BUKRS .
MOVE ZVOPS_TKA3A-KSTAR TO
TKA3A-KSTAR .
MOVE ZVOPS_TKA3A-MANDT TO
TKA3A-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TKA3A'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TKA3A TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TKA3A'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVOPS_TKA3P.....................................*
FORM GET_DATA_ZVOPS_TKA3P.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TKA3P WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TKA3P .
ZVOPS_TKA3P-MANDT =
TKA3P-MANDT .
ZVOPS_TKA3P-BUKRS =
TKA3P-BUKRS .
ZVOPS_TKA3P-KSTAR =
TKA3P-KSTAR .
ZVOPS_TKA3P-PRCTR =
TKA3P-PRCTR .
ZVOPS_TKA3P-KOKRS =
TKA3P-KOKRS .
ZVOPS_TKA3P-KOSTL =
TKA3P-KOSTL .
ZVOPS_TKA3P-AUFNR =
TKA3P-AUFNR .
<VIM_TOTAL_STRUC> = ZVOPS_TKA3P.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TKA3P .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TKA3P.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TKA3P-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TKA3P WHERE
  BUKRS = ZVOPS_TKA3P-BUKRS AND
  KSTAR = ZVOPS_TKA3P-KSTAR AND
  PRCTR = ZVOPS_TKA3P-PRCTR .
    IF SY-SUBRC = 0.
    DELETE TKA3P .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TKA3P WHERE
  BUKRS = ZVOPS_TKA3P-BUKRS AND
  KSTAR = ZVOPS_TKA3P-KSTAR AND
  PRCTR = ZVOPS_TKA3P-PRCTR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TKA3P.
    ENDIF.
TKA3P-MANDT =
ZVOPS_TKA3P-MANDT .
TKA3P-BUKRS =
ZVOPS_TKA3P-BUKRS .
TKA3P-KSTAR =
ZVOPS_TKA3P-KSTAR .
TKA3P-PRCTR =
ZVOPS_TKA3P-PRCTR .
TKA3P-KOKRS =
ZVOPS_TKA3P-KOKRS .
TKA3P-KOSTL =
ZVOPS_TKA3P-KOSTL .
TKA3P-AUFNR =
ZVOPS_TKA3P-AUFNR .
    IF SY-SUBRC = 0.
    UPDATE TKA3P ##WARN_OK.
    ELSE.
    INSERT TKA3P .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TKA3P-UPD_FLAG,
STATUS_ZVOPS_TKA3P-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TKA3P.
  SELECT SINGLE * FROM TKA3P WHERE
BUKRS = ZVOPS_TKA3P-BUKRS AND
KSTAR = ZVOPS_TKA3P-KSTAR AND
PRCTR = ZVOPS_TKA3P-PRCTR .
ZVOPS_TKA3P-MANDT =
TKA3P-MANDT .
ZVOPS_TKA3P-BUKRS =
TKA3P-BUKRS .
ZVOPS_TKA3P-KSTAR =
TKA3P-KSTAR .
ZVOPS_TKA3P-PRCTR =
TKA3P-PRCTR .
ZVOPS_TKA3P-KOKRS =
TKA3P-KOKRS .
ZVOPS_TKA3P-KOSTL =
TKA3P-KOSTL .
ZVOPS_TKA3P-AUFNR =
TKA3P-AUFNR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TKA3P USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TKA3P-BUKRS TO
TKA3P-BUKRS .
MOVE ZVOPS_TKA3P-KSTAR TO
TKA3P-KSTAR .
MOVE ZVOPS_TKA3P-PRCTR TO
TKA3P-PRCTR .
MOVE ZVOPS_TKA3P-MANDT TO
TKA3P-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TKA3P'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TKA3P TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TKA3P'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVOPS_TVKWZ_ASSI................................*
FORM GET_DATA_ZVOPS_TVKWZ_ASSI.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TVKWZ WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TVKWZ_ASSI .
ZVOPS_TVKWZ_ASSI-MANDT =
TVKWZ-MANDT .
ZVOPS_TVKWZ_ASSI-VKORG =
TVKWZ-VKORG .
ZVOPS_TVKWZ_ASSI-VTWEG =
TVKWZ-VTWEG .
ZVOPS_TVKWZ_ASSI-WERKS =
TVKWZ-WERKS .
    SELECT SINGLE * FROM TVKO WHERE
VKORG = TVKWZ-VKORG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM T001 WHERE
BUKRS = TVKO-BUKRS .
      IF SY-SUBRC EQ 0.
      ENDIF.
      SELECT SINGLE * FROM TVKOT WHERE
VKORG = TVKO-VKORG AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VKORGTEXT =
TVKOT-VTEXT .
      ENDIF.
      SELECT SINGLE * FROM TASSIGN_SD_VKORG WHERE
VKORG = TVKO-VKORG .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD =
TASSIGN_SD_VKORG-STATUS_ASSIGN_SD .
      ENDIF.
    ENDIF.
    SELECT SINGLE * FROM TVKOV WHERE
VKORG = TVKWZ-VKORG AND
VTWEG = TVKWZ-VTWEG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM TVTW WHERE
VTWEG = TVKOV-VTWEG .
      IF SY-SUBRC EQ 0.
        SELECT SINGLE * FROM TVTWT WHERE
VTWEG = TVTW-VTWEG AND
SPRAS = SY-LANGU .
        IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VTWEGTEXT =
TVTWT-VTEXT .
        ENDIF.
      ENDIF.
    ENDIF.
    SELECT SINGLE * FROM T001W WHERE
WERKS = TVKWZ-WERKS .
    IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-WERKSTEXT =
T001W-NAME1 .
      SELECT SINGLE * FROM T001K WHERE
BWKEY = T001W-BWKEY .
      IF SY-SUBRC EQ 0.
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZVOPS_TVKWZ_ASSI.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TVKWZ_ASSI .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TVKWZ_ASSI.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TVKWZ_ASSI-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TVKWZ WHERE
  VKORG = ZVOPS_TVKWZ_ASSI-VKORG AND
  VTWEG = ZVOPS_TVKWZ_ASSI-VTWEG AND
  WERKS = ZVOPS_TVKWZ_ASSI-WERKS .
    IF SY-SUBRC = 0.
    DELETE TVKWZ .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TVKWZ WHERE
  VKORG = ZVOPS_TVKWZ_ASSI-VKORG AND
  VTWEG = ZVOPS_TVKWZ_ASSI-VTWEG AND
  WERKS = ZVOPS_TVKWZ_ASSI-WERKS .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TVKWZ.
    ENDIF.
TVKWZ-MANDT =
ZVOPS_TVKWZ_ASSI-MANDT .
TVKWZ-VKORG =
ZVOPS_TVKWZ_ASSI-VKORG .
TVKWZ-VTWEG =
ZVOPS_TVKWZ_ASSI-VTWEG .
TVKWZ-WERKS =
ZVOPS_TVKWZ_ASSI-WERKS .
    IF SY-SUBRC = 0.
    UPDATE TVKWZ ##WARN_OK.
    ELSE.
    INSERT TVKWZ .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TVKWZ_ASSI-UPD_FLAG,
STATUS_ZVOPS_TVKWZ_ASSI-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TVKWZ_ASSI.
  SELECT SINGLE * FROM TVKWZ WHERE
VKORG = ZVOPS_TVKWZ_ASSI-VKORG AND
VTWEG = ZVOPS_TVKWZ_ASSI-VTWEG AND
WERKS = ZVOPS_TVKWZ_ASSI-WERKS .
ZVOPS_TVKWZ_ASSI-MANDT =
TVKWZ-MANDT .
ZVOPS_TVKWZ_ASSI-VKORG =
TVKWZ-VKORG .
ZVOPS_TVKWZ_ASSI-VTWEG =
TVKWZ-VTWEG .
ZVOPS_TVKWZ_ASSI-WERKS =
TVKWZ-WERKS .
    SELECT SINGLE * FROM TVKO WHERE
VKORG = TVKWZ-VKORG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM T001 WHERE
BUKRS = TVKO-BUKRS .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
      SELECT SINGLE * FROM TVKOT WHERE
VKORG = TVKO-VKORG AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VKORGTEXT =
TVKOT-VTEXT .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-VKORGTEXT .
      ENDIF.
      SELECT SINGLE * FROM TASSIGN_SD_VKORG WHERE
VKORG = TVKO-VKORG .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD =
TASSIGN_SD_VKORG-STATUS_ASSIGN_SD .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-VKORGTEXT .
      CLEAR ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD .
    ENDIF.
    SELECT SINGLE * FROM TVKOV WHERE
VKORG = TVKWZ-VKORG AND
VTWEG = TVKWZ-VTWEG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM TVTW WHERE
VTWEG = TVKOV-VTWEG .
      IF SY-SUBRC EQ 0.
        SELECT SINGLE * FROM TVTWT WHERE
VTWEG = TVTW-VTWEG AND
SPRAS = SY-LANGU .
        IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VTWEGTEXT =
TVTWT-VTEXT .
        ELSE.
          CLEAR SY-SUBRC.
          CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
        ENDIF.
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
    ENDIF.
    SELECT SINGLE * FROM T001W WHERE
WERKS = TVKWZ-WERKS .
    IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-WERKSTEXT =
T001W-NAME1 .
      SELECT SINGLE * FROM T001K WHERE
BWKEY = T001W-BWKEY .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-WERKSTEXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TVKWZ_ASSI USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TVKWZ_ASSI-VKORG TO
TVKWZ-VKORG .
MOVE ZVOPS_TVKWZ_ASSI-VTWEG TO
TVKWZ-VTWEG .
MOVE ZVOPS_TVKWZ_ASSI-WERKS TO
TVKWZ-WERKS .
MOVE ZVOPS_TVKWZ_ASSI-MANDT TO
TVKWZ-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TVKWZ'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TVKWZ TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TVKWZ'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVOPS_TVKWZ_ASSI USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
TVKWZ-MANDT =
ZVOPS_TVKWZ_ASSI-MANDT .
TVKWZ-VKORG =
ZVOPS_TVKWZ_ASSI-VKORG .
TVKWZ-VTWEG =
ZVOPS_TVKWZ_ASSI-VTWEG .
TVKWZ-WERKS =
ZVOPS_TVKWZ_ASSI-WERKS .
    SELECT SINGLE * FROM TVKO WHERE
VKORG = TVKWZ-VKORG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM T001 WHERE
BUKRS = TVKO-BUKRS .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
      SELECT SINGLE * FROM TVKOT WHERE
VKORG = TVKO-VKORG AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VKORGTEXT =
TVKOT-VTEXT .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-VKORGTEXT .
      ENDIF.
      SELECT SINGLE * FROM TASSIGN_SD_VKORG WHERE
VKORG = TVKO-VKORG .
      IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD =
TASSIGN_SD_VKORG-STATUS_ASSIGN_SD .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-VKORGTEXT .
      CLEAR ZVOPS_TVKWZ_ASSI-STATUS_ASSIGN_SD .
    ENDIF.
    SELECT SINGLE * FROM TVKOV WHERE
VKORG = TVKWZ-VKORG AND
VTWEG = TVKWZ-VTWEG .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM TVTW WHERE
VTWEG = TVKOV-VTWEG .
      IF SY-SUBRC EQ 0.
        SELECT SINGLE * FROM TVTWT WHERE
VTWEG = TVTW-VTWEG AND
SPRAS = SY-LANGU .
        IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-VTWEGTEXT =
TVTWT-VTEXT .
        ELSE.
          CLEAR SY-SUBRC.
          CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
        ENDIF.
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-VTWEGTEXT .
    ENDIF.
    SELECT SINGLE * FROM T001W WHERE
WERKS = TVKWZ-WERKS .
    IF SY-SUBRC EQ 0.
ZVOPS_TVKWZ_ASSI-WERKSTEXT =
T001W-NAME1 .
      SELECT SINGLE * FROM T001K WHERE
BWKEY = T001W-BWKEY .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVOPS_TVKWZ_ASSI-WERKSTEXT .
    ENDIF.
ENDFORM.
*...processing: ZVOPS_TVSTZ_STOR................................*
FORM GET_DATA_ZVOPS_TVSTZ_STOR.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TVSTZ_STORLOC WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TVSTZ_STOR .
ZVOPS_TVSTZ_STOR-MANDT =
TVSTZ_STORLOC-MANDT .
ZVOPS_TVSTZ_STOR-VSBED =
TVSTZ_STORLOC-VSBED .
ZVOPS_TVSTZ_STOR-LADGR =
TVSTZ_STORLOC-LADGR .
ZVOPS_TVSTZ_STOR-WERKS =
TVSTZ_STORLOC-WERKS .
ZVOPS_TVSTZ_STOR-LGORT =
TVSTZ_STORLOC-LGORT .
ZVOPS_TVSTZ_STOR-VSTEL =
TVSTZ_STORLOC-VSTEL .
ZVOPS_TVSTZ_STOR-VSTE1 =
TVSTZ_STORLOC-VSTE1 .
ZVOPS_TVSTZ_STOR-VSTE2 =
TVSTZ_STORLOC-VSTE2 .
ZVOPS_TVSTZ_STOR-VSTE3 =
TVSTZ_STORLOC-VSTE3 .
ZVOPS_TVSTZ_STOR-VSTE4 =
TVSTZ_STORLOC-VSTE4 .
ZVOPS_TVSTZ_STOR-VSTE5 =
TVSTZ_STORLOC-VSTE5 .
ZVOPS_TVSTZ_STOR-VSTE6 =
TVSTZ_STORLOC-VSTE6 .
ZVOPS_TVSTZ_STOR-VSTE7 =
TVSTZ_STORLOC-VSTE7 .
ZVOPS_TVSTZ_STOR-VSTE8 =
TVSTZ_STORLOC-VSTE8 .
ZVOPS_TVSTZ_STOR-VSTE9 =
TVSTZ_STORLOC-VSTE9 .
ZVOPS_TVSTZ_STOR-VSTE10 =
TVSTZ_STORLOC-VSTE10 .
ZVOPS_TVSTZ_STOR-VSTE11 =
TVSTZ_STORLOC-VSTE11 .
<VIM_TOTAL_STRUC> = ZVOPS_TVSTZ_STOR.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TVSTZ_STOR .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TVSTZ_STOR.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TVSTZ_STOR-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TVSTZ_STORLOC WHERE
  VSBED = ZVOPS_TVSTZ_STOR-VSBED AND
  LADGR = ZVOPS_TVSTZ_STOR-LADGR AND
  WERKS = ZVOPS_TVSTZ_STOR-WERKS AND
  LGORT = ZVOPS_TVSTZ_STOR-LGORT .
    IF SY-SUBRC = 0.
    DELETE TVSTZ_STORLOC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TVSTZ_STORLOC WHERE
  VSBED = ZVOPS_TVSTZ_STOR-VSBED AND
  LADGR = ZVOPS_TVSTZ_STOR-LADGR AND
  WERKS = ZVOPS_TVSTZ_STOR-WERKS AND
  LGORT = ZVOPS_TVSTZ_STOR-LGORT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TVSTZ_STORLOC.
    ENDIF.
TVSTZ_STORLOC-MANDT =
ZVOPS_TVSTZ_STOR-MANDT .
TVSTZ_STORLOC-VSBED =
ZVOPS_TVSTZ_STOR-VSBED .
TVSTZ_STORLOC-LADGR =
ZVOPS_TVSTZ_STOR-LADGR .
TVSTZ_STORLOC-WERKS =
ZVOPS_TVSTZ_STOR-WERKS .
TVSTZ_STORLOC-LGORT =
ZVOPS_TVSTZ_STOR-LGORT .
TVSTZ_STORLOC-VSTEL =
ZVOPS_TVSTZ_STOR-VSTEL .
TVSTZ_STORLOC-VSTE1 =
ZVOPS_TVSTZ_STOR-VSTE1 .
TVSTZ_STORLOC-VSTE2 =
ZVOPS_TVSTZ_STOR-VSTE2 .
TVSTZ_STORLOC-VSTE3 =
ZVOPS_TVSTZ_STOR-VSTE3 .
TVSTZ_STORLOC-VSTE4 =
ZVOPS_TVSTZ_STOR-VSTE4 .
TVSTZ_STORLOC-VSTE5 =
ZVOPS_TVSTZ_STOR-VSTE5 .
TVSTZ_STORLOC-VSTE6 =
ZVOPS_TVSTZ_STOR-VSTE6 .
TVSTZ_STORLOC-VSTE7 =
ZVOPS_TVSTZ_STOR-VSTE7 .
TVSTZ_STORLOC-VSTE8 =
ZVOPS_TVSTZ_STOR-VSTE8 .
TVSTZ_STORLOC-VSTE9 =
ZVOPS_TVSTZ_STOR-VSTE9 .
TVSTZ_STORLOC-VSTE10 =
ZVOPS_TVSTZ_STOR-VSTE10 .
TVSTZ_STORLOC-VSTE11 =
ZVOPS_TVSTZ_STOR-VSTE11 .
    IF SY-SUBRC = 0.
    UPDATE TVSTZ_STORLOC ##WARN_OK.
    ELSE.
    INSERT TVSTZ_STORLOC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TVSTZ_STOR-UPD_FLAG,
STATUS_ZVOPS_TVSTZ_STOR-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TVSTZ_STOR.
  SELECT SINGLE * FROM TVSTZ_STORLOC WHERE
VSBED = ZVOPS_TVSTZ_STOR-VSBED AND
LADGR = ZVOPS_TVSTZ_STOR-LADGR AND
WERKS = ZVOPS_TVSTZ_STOR-WERKS AND
LGORT = ZVOPS_TVSTZ_STOR-LGORT .
ZVOPS_TVSTZ_STOR-MANDT =
TVSTZ_STORLOC-MANDT .
ZVOPS_TVSTZ_STOR-VSBED =
TVSTZ_STORLOC-VSBED .
ZVOPS_TVSTZ_STOR-LADGR =
TVSTZ_STORLOC-LADGR .
ZVOPS_TVSTZ_STOR-WERKS =
TVSTZ_STORLOC-WERKS .
ZVOPS_TVSTZ_STOR-LGORT =
TVSTZ_STORLOC-LGORT .
ZVOPS_TVSTZ_STOR-VSTEL =
TVSTZ_STORLOC-VSTEL .
ZVOPS_TVSTZ_STOR-VSTE1 =
TVSTZ_STORLOC-VSTE1 .
ZVOPS_TVSTZ_STOR-VSTE2 =
TVSTZ_STORLOC-VSTE2 .
ZVOPS_TVSTZ_STOR-VSTE3 =
TVSTZ_STORLOC-VSTE3 .
ZVOPS_TVSTZ_STOR-VSTE4 =
TVSTZ_STORLOC-VSTE4 .
ZVOPS_TVSTZ_STOR-VSTE5 =
TVSTZ_STORLOC-VSTE5 .
ZVOPS_TVSTZ_STOR-VSTE6 =
TVSTZ_STORLOC-VSTE6 .
ZVOPS_TVSTZ_STOR-VSTE7 =
TVSTZ_STORLOC-VSTE7 .
ZVOPS_TVSTZ_STOR-VSTE8 =
TVSTZ_STORLOC-VSTE8 .
ZVOPS_TVSTZ_STOR-VSTE9 =
TVSTZ_STORLOC-VSTE9 .
ZVOPS_TVSTZ_STOR-VSTE10 =
TVSTZ_STORLOC-VSTE10 .
ZVOPS_TVSTZ_STOR-VSTE11 =
TVSTZ_STORLOC-VSTE11 .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TVSTZ_STOR USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TVSTZ_STOR-VSBED TO
TVSTZ_STORLOC-VSBED .
MOVE ZVOPS_TVSTZ_STOR-LADGR TO
TVSTZ_STORLOC-LADGR .
MOVE ZVOPS_TVSTZ_STOR-WERKS TO
TVSTZ_STORLOC-WERKS .
MOVE ZVOPS_TVSTZ_STOR-LGORT TO
TVSTZ_STORLOC-LGORT .
MOVE ZVOPS_TVSTZ_STOR-MANDT TO
TVSTZ_STORLOC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TVSTZ_STORLOC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TVSTZ_STORLOC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TVSTZ_STORLOC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVOPS_TWLAD.....................................*
FORM GET_DATA_ZVOPS_TWLAD.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TWLAD WHERE
(VIM_WHERETAB) .
    CLEAR ZVOPS_TWLAD .
ZVOPS_TWLAD-MANDT =
TWLAD-MANDT .
ZVOPS_TWLAD-WERKS =
TWLAD-WERKS .
ZVOPS_TWLAD-LGORT =
TWLAD-LGORT .
ZVOPS_TWLAD-LFDNR =
TWLAD-LFDNR .
ZVOPS_TWLAD-ADRNR =
TWLAD-ADRNR .
<VIM_TOTAL_STRUC> = ZVOPS_TWLAD.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVOPS_TWLAD .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVOPS_TWLAD.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVOPS_TWLAD-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TWLAD WHERE
  WERKS = ZVOPS_TWLAD-WERKS AND
  LGORT = ZVOPS_TWLAD-LGORT AND
  LFDNR = ZVOPS_TWLAD-LFDNR .
    IF SY-SUBRC = 0.
    DELETE TWLAD .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TWLAD WHERE
  WERKS = ZVOPS_TWLAD-WERKS AND
  LGORT = ZVOPS_TWLAD-LGORT AND
  LFDNR = ZVOPS_TWLAD-LFDNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TWLAD.
    ENDIF.
TWLAD-MANDT =
ZVOPS_TWLAD-MANDT .
TWLAD-WERKS =
ZVOPS_TWLAD-WERKS .
TWLAD-LGORT =
ZVOPS_TWLAD-LGORT .
TWLAD-LFDNR =
ZVOPS_TWLAD-LFDNR .
TWLAD-ADRNR =
ZVOPS_TWLAD-ADRNR .
    IF SY-SUBRC = 0.
    UPDATE TWLAD ##WARN_OK.
    ELSE.
    INSERT TWLAD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVOPS_TWLAD-UPD_FLAG,
STATUS_ZVOPS_TWLAD-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVOPS_TWLAD.
  SELECT SINGLE * FROM TWLAD WHERE
WERKS = ZVOPS_TWLAD-WERKS AND
LGORT = ZVOPS_TWLAD-LGORT AND
LFDNR = ZVOPS_TWLAD-LFDNR .
ZVOPS_TWLAD-MANDT =
TWLAD-MANDT .
ZVOPS_TWLAD-WERKS =
TWLAD-WERKS .
ZVOPS_TWLAD-LGORT =
TWLAD-LGORT .
ZVOPS_TWLAD-LFDNR =
TWLAD-LFDNR .
ZVOPS_TWLAD-ADRNR =
TWLAD-ADRNR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVOPS_TWLAD USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVOPS_TWLAD-WERKS TO
TWLAD-WERKS .
MOVE ZVOPS_TWLAD-LGORT TO
TWLAD-LGORT .
MOVE ZVOPS_TWLAD-LFDNR TO
TWLAD-LFDNR .
MOVE ZVOPS_TWLAD-MANDT TO
TWLAD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TWLAD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TWLAD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TWLAD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
